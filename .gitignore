

public class Game 
{
    private Parser parser;
    private Player player;
    private String prevRoom = "";
    private String currentRoom = "";
    
    private Room outside, reception, historyBlock, exhibition, artBlock, scienceBlock, gallery, giftshop, room_a, room_b;
        
    /**
     * Create the game and initialise its internal map.
     */
    public Game() 
    {                
        Room startRoom = createRooms();
        player = new Player("Eric", startRoom);        
        parser = new Parser();
    }

    /**
     * Create all the rooms and link their exits together.
     * 
     * @return Returns the starting room
     */
    private Room createRooms()
    {
      
        // create the rooms
        outside = new Room("outside the main entrance of the museum");
        reception = new Room("in a reception");
        historyBlock = new Room("in the museum historyBlock");
        exhibition = new Room("in a exhibition");
        artBlock = new Room("in the artBlock");
        scienceBlock = new Room("in the scienceBlock");
        gallery = new Room ("in the gallery");
        giftshop = new Room("in the giftshop");
        room_a = new Room("room a");
        room_b = new Room("room b");
        
        // put items in the room
        historyBlock.addItem(new Item("toy", "toy", 0.5));
        historyBlock.addItem(new Item("armour", "armour", 30));
        
        exhibition.addItem(new Item("telescope", "telescope", 30));
        exhibition.addItem(new Item("skull", "skull", 0.5));
        
        reception.addItem(new Item("bell ", "bell", 30));
        reception.addItem(new Item("flyer", "flyer", 0.1));
//        reception.addCharacter(new Character("receptionist","", "key to the vault is in the museum", "are you not looking for the key",));
  
        artBlock.addItem(new Item("paintbrush", "paintbrush", 0.2));
        artBlock.addItem(new Item("paint", "paint", 30));
        
        giftshop.addItem(new Item("keychain", "keychain", 0.2));
        
        room_a.addItem(new Item("diamond", "giant diamond",0.5));
        room_b.addItem(new Item("guard","you're nicked",100));
        
        outside.addItem(new Item("gum", "gum", 30));
        outside.addItem(new Item("bottle", "broken bottle", 30));
        outside.addItem(new Item("doughnut","doughnut", 0.5));
        
//        reception.setCharacter(new Character("receptionist", "key to the vault is in the museum", "go find it"));
        // create a key that will be used to lock the door to the office
        Item key = new Item("key", "key to the vault", 0.01);
        scienceBlock.addItem(key);
        // create a vipPass that will be used to lock the historyBlock        
        Item vipPass = new Item("vipPass", "vipPass", 0.01);
        giftshop.addItem(vipPass);
        
        //characters
//        reception.addCharacter(new Character("receptionist","", "key to the vault is in the museum", "are you not looking for the key",));
//        .addCharacter(new Character("receptionist","", "key to the vault is in the museum", "are you not looking for the key",));          

//        //initialise room exits
          outside.setDoor("north",new Door(outside, "north", reception, "south",null, null));
          giftshop.setDoor("east",new Door(giftshop,"east", reception, "west", null, null));
          reception.setDoor("west",new Door(reception, "west", giftshop, "east", null, null));
          historyBlock.setDoor("north",new Door(historyBlock, "north", exhibition, "south", vipPass, null));
          historyBlock.setDoor("south",new Door(historyBlock, "south", reception, "north", vipPass, null));
          exhibition.setDoor("south",new Door(exhibition, "south", room_b, "west", null, null));
          exhibition.setDoor("south",new Door(exhibition, "south", historyBlock, "north", null, null));
          room_b.setDoor("west",new Door(room_b, "west", exhibition, "east", key, null));
          room_a.setDoor("east",new Door(room_a, "east", exhibition, "west", key, null));
          artBlock.setDoor("west",new Door(artBlock, "west", historyBlock, "east", null, null));                  
          scienceBlock.setDoor("west",new Door(scienceBlock, "west", artBlock, "east", null, null));

        return outside;
    }


   public void play() 
    {            
        printWelcome();

        // Enter the main command loop.  Here we repeatedly read commands and
        // execute them until the game is over.

        boolean finished = false;
        while (! finished) 
        {
            Command command = parser.getCommand();
            finished = processCommand(command);
            if(player.getCurrentRoom() == room_a) {
                printWin();
                finished = true;
            }
            if(player.getCurrentRoom() == room_b) {
                printLose();
                finished = true;
            }
        }
//        }
        System.out.println("Game over.");
    }

    /**
     * Print out the opening message for the player.
     */
    
    private void printWelcome()
    {
        System.out.println();
        System.out.println("Welcome to the World of Zuul!");
        System.out.println("World of Zuul is a new, incredibly boring adventure game.");
        System.out.println("Type 'help' if you need help.");
        System.out.println();
        System.out.println(player.getLongDescription());
    }
    
    private void printWin() 
    {
        System.out.println("\nYou got your reward and won the game. Congratulations!");
    }
    
    private void printLose() 
    {
        System.out.println("\nYou've walked in to the security office. caught red handed.");
    }
        
    
    /**
     * Given a command, process (that is: execute) the command.
     * If this command ends the game, true is returned, otherwise false is
     * returned.
     */
    private boolean processCommand(Command command) 
    {
        boolean wantToQuit = false;

        CommandWord commandWord = command.getCommandWord();

        switch (commandWord) 
        {
            case UNKNOWN:
                System.out.println("I don't know what you mean...");
                break;

            case HELP:
                printHelp();
                break;

            case MOVE:
                move(command);
                break;
                
            case TURN:
                turn(command);
                break;
                
            case TAKE:
               take(command);
               break;
               
            case DROP:
               drop(command);
               break;
            
            case EAT:
               eat(command);
               break;
            
            case ITEMS:
               printItems();
               break;
               
//          case TALK:
//               talk(command);
//               break;
//         
            case GIVE:
               give(command);
               break;
               
//            case BACK:
//               moveBack(command);
//               break;
               
            case QUIT:
                wantToQuit = quit(command);
                break;
        }
        return wantToQuit;
    }



    // implementations of user commands:

    /**
     * Print out some help information.
     * Here we print a message and a list of the 
     * command words.
     */
    private void printHelp() 
    {
        System.out.println("You are looking for a vault with riches within");
        System.out.println("around at the museum.");
        System.out.println();
        System.out.println("Your command words are:");
        parser.showCommands();
    }


    /** 
     * Try to go to one direction. If there is an exit, enter the new
     * room, otherwise print an error message.
     */
    private void move(Command command) 
    {
        if(!command.hasSecondWord()) {
            // if there is no second word, we don't know where to go...
            System.out.println("Go where?");
            return;
        }

        String direction = command.getSecondWord();

        // Try to leave current room.
        Door door = player.getCurrentRoom().getDoor(direction);

        if (door == null) {
            System.out.println("There is no door!");
        }
        else {
            if(player.move(direction)) {
                System.out.println(player.getLongDescription());
            } 
            else {
                System.out.println("The door is locked and you need a key or a vipcard");
            }
        }
    }     
//private void moveBack(Command command)

//        prevRoom = currentRoom;
//        currentRoom = direction;
//        {
//        if(direction.equals("reception")){
//            prevRoom = "outside";
//            System.out.println("");
//        }else if(direction.equals("giftshop")){
//            prevRoom = "reception";
//            System.out.println("");
//        }
//        
//        if(direction.equals("historyBlock")){
//            prevRoom = "reception";
//            System.out.println("");
//        }else if(direction.equals("artBlock")){
//            prevRoom = "historyBlock";
//            System.out.println("");
//        }
//        
//  
//        if(!direction.equals("scienceBlock") && !direction.equals("artBlock") && !direction.equals("historyBlock") ){
//            prevRoom = "outside";
//                
//            System.out.println("current: " +currentRoom);
//            System.out.println("previous: " +prevRoom);
//            System.out.println(player.getLongDescription());
//        }
    
//       }
//        }   
//    }
     private void turn(Command command) // newly added
    {
       if(!command.hasSecondWord()) 
        {
            // if there is no second word, we don't know which way to turn...
            System.out.println("turn which way?");
         return;
         }

        String direction = command.getSecondWord();
        if(direction.equals("left")) 
        { player.turnLeft();
         }
        else if(direction.equals("right")) 
        { player.turnRight();
        }
        else 
        { System.out.println("You can not turn that way");}
        System.out.println("You are currently facing " + player.getDirection());
    }    
      
  
    /** 
     * "Quit" was entered. Check the rest of the command to see
     * whether we really quit the game. Return true, if this command
     * quits the game, false otherwise.
     */
    private boolean quit(Command command) 
    {
        if(command.hasSecondWord()) {
            System.out.println("Quit what?");
            return false;
        }
        else {
            return true;  // signal that we want to quit
        }
    }
    
    /** 
     * Try to take an item from the current room. If the item is there,
     * pick it up, if not print an error message.
//     */
//    private void talk(Command command)
//    {
//        if(!command.hasSecondWord()) {
//            // if there is no second word, we don't who to talk to...
//          System.out.println("talk to who?");
//          return;
//        }
//        String itemName = command.getSecondWord();
//        Item item = player.talk("receptionist");
//        if(item == null) {
//               System.out.println("cant talk" + itemName);
//         }
//        else {
//             System.out.println("heard the key to the vault is around" + item.getDescription());
//    }
//}
    private void take(Command command) 
    {
        if(!command.hasSecondWord()) {
            // if there is no second word, we don't know what to take...
            System.out.println("What do you want to take?");
            return;
        }

        String itemName = command.getSecondWord();
        Item item = player.pickUpItem(itemName);
        
        if(item == null) {
            System.out.println("Can't pick up the item: " + itemName);
        } 
        else {
            System.out.println("Picked up " + item.getDescription());
        }
    }
    
    /** 
     * Drops an item into the current room. If the player carries the item
     * drop it, if not print an error message.
     */
    private void drop(Command command) 
    {
        if(!command.hasSecondWord()) {
            // if there is no second word, we don't know what to drop...
            System.out.println("What do you want to drop?");
            return;
        }

        String itemName = command.getSecondWord();
        Item item = player.dropItem(itemName);
        
        if(item == null) {
            System.out.println("You don't carry the item: " + itemName);
        } 
        else {
            System.out.println("Dropped " + item.getDescription());
        }
    }
    
    /**
     * Prints out the items that the player is currently carrying.
     */
    private void printItems() 
    {
        System.out.println(player.getItemsString());   
    }
        
     /** 
     * Try to take an item from the current room. If the item is there,
     * pick it up, if not print an error message.
     */
    private void eat(Command command) 
    {
        if(!command.hasSecondWord()) {
            // if there is no second word, we don't know what to eat...
            System.out.println("What do you want to eat?");
            return;
        }
        String itemName = command.getSecondWord();
        Item item = player.eat(itemName);
        if(item == null) {
            System.out.println("Could not eat " + itemName);            
        } 
        else {
            System.out.println("Ate " + item.getDescription());
        }
    }
    
//    private void charge() 
//    {
//        player.chargeBeamer();
//        System.out.println("Beamer charged.");
//    }
    
    private void give(Command command) 
    {
        if(!command.hasSecondWord()) {
            // if there is no second word, we don't know what to give...
            System.out.println("What do you want to give?");
            return;
        }
        String itemName = command.getSecondWord();
        Item item = player.give(itemName);
        
        
        if(item == null) {
            System.out.println("Could not give " + itemName);            
        } 
        else {
            System.out.println("Gave " + item.getDescription());
        }
        
                if(!command.hasSecondWord()) {
            // if there is no second word, we don't know where to go...
            System.out.println("Give what?");
            return;
        }

//        String direction = command.getSecondWord();
//
//        // Try to leave current room.
//        Room nextRoom = player.getCurrentRoom().setDoor(direction);
//
//        if (nextRoom == null)
//            System.out.println("You can't give that!");
//        else {
//            player.enterRoom(nextRoom);
//            System.out.println(player.getLongDescription());
//        }
    }
}


