/**
 * A door that connects two rooms.
 * Some doors may be locked, and requires a key to be opened
 * 
 * @author  Poul Henriksen
 * @version 2011.07.31
 */
public class Door
{
    private Room roomOne;
    private Room roomTwo;
    private String directionOne;
    private String directionTwo;
    private Item key;
    private Item vipPass;
    private boolean locked = false;
    
    /**
     * Create a new door between two rooms. 
     * It also takes a key as parameter which can be used to unlock the door.
     * If a key is given here, the door will be locked with it.
     */
    public Door(Room roomOne, String directionOne, Room roomTwo, String directionTwo, Item key, Item vipPass)
    {
        this.roomOne = roomOne;
        this.roomTwo = roomTwo;
        this.directionOne = directionOne;
        this.directionTwo = directionTwo;
        roomOne.setDoor(directionOne, this);
        roomTwo.setDoor(directionTwo, this);
        this.key = key;
        this.vipPass = vipPass;
        lock(key);
        lock(vipPass);
    }
    
    /**
     * Try to lock the door with the key.
     * 
     * @return true if the door was successfully locked.
     */
    public boolean lock(Item key) 
    {
        if(this.key == key && key != null) {
            locked = true;  
        }
        return locked;

    
    /**
     * Try to unlock the door with the key.
     * 
     * @return true if the door was successfully unlocked.
     */
    }        
    public boolean unlock(Item key) 
    {
        if(this.key == key && key != null) {
            locked = false;  
        } 
        return !locked;
    }  
    
    /**
     * Try to go through the door from one room into the other room. 
     * 
     * @param fromRoom The room from which side we open the door.
     * @return The room on the other side, or null if the door is locked.
     */
    public Room open(Room fromRoom) 
    {
        if(locked) {
            return null;
        }   
        if(fromRoom == roomOne) {
            return roomTwo;
        }
        else if (fromRoom == roomTwo) {
            return roomOne;
        } 
        else {
            return null;
        }            
    }    
}
